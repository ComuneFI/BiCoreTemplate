stages:
    - build
    - deploy
    - cleanup_build
    
variables:
  # symfony 4
  http_proxy: 'http://proxyhttp.comune.intranet:8080/'
  https_proxy: 'http://proxyhttps.comune.intranet:8080/'
  ftp_proxy: 'http://proxyftp.comune.intranet:8080/'
  no_proxy: 'localhost,127.0.0.1,.localhost,.comune.intranet'
  https_proxy_request_fulluri: 0
  HTTP_PROXY: 'http://proxyhttp.comune.intranet:8080/'
  HTTPS_PROXY: 'http://proxyhttps.comune.intranet:8080/'
  FTP_PROXY: 'http://proxyftp.comune.intranet:8080/'
  NO_PROXY: 'localhost,127.0.0.1,.localhost,.comune.intranet'
  HTTPS_PROXY_REQUEST_FULLURI: 0
  NSS_SSL_CBC_RANDOM_IV: 0
  
  ANT_OPTS: '-Dhttp.proxyHost=proxyhttp.comune.intranet -Dhttp.proxyPort=8080 -Dhttps.proxyHost=proxyhttps.comune.intranet -Dhttps.proxyPort=8080'
  
  TAG_COMMIT: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  TAG_LATEST: $CI_REGISTRY_IMAGE:latest
  
  MAILER_DSN: $MAILER_DSN
  
  DISPLAY: ":0.0"
  
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - vendor/
    - .composer_cache


build_postgres_php74:
    image: $CI_REGISTRY/docker/php7.4-xdebug-apache
#    only:
#      refs:
#        - develop
    before_script:
        - php -m
        - apt-get update && apt-get install -y xvfb fontconfig pcregrep
        - Xvfb :0 -ac -screen 0 1024x768x24 &
        - echo "xdebug.mode=coverage" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
        - composer config cache-files-dir .composer_cache
    stage: build
    retry: 2
    services:
      - postgres:12.2-alpine
    script:
      - ant
      - ./bin/console lint:yaml config --parse-tags
      # this checks that the Twig template files contain no syntax errors
      - ./bin/console lint:twig templates --env=prod
      # this checks that the XLIFF translations contain no syntax errors
      - ./bin/console lint:xliff translations
      # this checks that arguments injected into services match type declarations
      #- ./bin/console lint:container
      # TODO: replace the old security checker by the new checker provided by the 'symfony' binary
      # this checks that the application doesn't use dependencies with known security vulnerabilities
      #- ./bin/console security:check
      # this checks that Doctrine's mapping configurations are valid
      - ./bin/console doctrine:schema:validate --skip-sync -vvv --no-interaction
      #  Fail CI if the repo is in a dirty state after building assets (only for current release ie install)
      #-  if [[ "$ACTION" == "install" ]]; then yarn install && yarn encore production && git add --all && git diff --staged --exit-code; fi
      #- composer validate --strict
    variables:
      DATABASE_URL: $POSTGRES_DATABASE_URL
      POSTGRES_DB: bicorebundletest
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: "adminpass"
    only:
      - develop
  
build_mysql_php74:
    image: $CI_REGISTRY/docker/php7.4-xdebug-apache
#    only:
#      refs:
#        - develop
    before_script:
        - php -m
        - apt-get update && apt-get install -y xvfb fontconfig pcregrep
        - Xvfb :0 -ac -screen 0 1024x768x24 &
        - echo "xdebug.mode=coverage" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
        - composer config cache-files-dir .composer_cache
    stage: build
    retry: 2
    services:
      - mysql:8.0.22
    script:
      - ant
      - ./bin/console lint:yaml config --parse-tags
      # this checks that the Twig template files contain no syntax errors
      - ./bin/console lint:twig templates --env=prod
      # this checks that the XLIFF translations contain no syntax errors
      - ./bin/console lint:xliff translations
      # this checks that arguments injected into services match type declarations
      - ./bin/console lint:container
      # TODO: replace the old security checker by the new checker provided by the 'symfony' binary
      # this checks that the application doesn't use dependencies with known security vulnerabilities
      #- ./bin/console security:check
      # this checks that Doctrine's mapping configurations are valid
      - ./bin/console doctrine:schema:validate --skip-sync -vvv --no-interaction
      #  Fail CI if the repo is in a dirty state after building assets (only for current release ie install)
      #-  if [[ "$ACTION" == "install" ]]; then yarn install && yarn encore production && git add --all && git diff --staged --exit-code; fi
      #- composer validate --strict
    variables:
      DATABASE_URL: $MYSQL_DATABASE_URL
      MYSQL_DATABASE: bicorebundletest
      MYSQL_ROOT_PASSWORD: "adminpass"
    only:
      - develop
      
build_sqlite_php74:
    image: $CI_REGISTRY/docker/php7.4-xdebug-apache
#    only:
#      refs:
#        - develop
    stage: build
    retry: 2
    allow_failure: true
    script:
      - ant
      - ./bin/console lint:yaml config --parse-tags
      # this checks that the Twig template files contain no syntax errors
      - ./bin/console lint:twig templates --env=prod
      # this checks that the XLIFF translations contain no syntax errors
      - ./bin/console lint:xliff translations
      # this checks that arguments injected into services match type declarations
      - ./bin/console lint:container
      # TODO: replace the old security checker by the new checker provided by the 'symfony' binary
      # this checks that the application doesn't use dependencies with known security vulnerabilities
      #- ./bin/console security:check
      # this checks that Doctrine's mapping configurations are valid
      - ./bin/console doctrine:schema:validate --skip-sync -vvv --no-interaction
      #  Fail CI if the repo is in a dirty state after building assets (only for current release ie install)
      #-  if [[ "$ACTION" == "install" ]]; then yarn install && yarn encore production && git add --all && git diff --staged --exit-code; fi
      #- composer validate --strict
    variables:
      DATABASE_URL: $SQLITE_DATABASE_URL
    only:
      - develop

build_postgres_php80:
    image: $CI_REGISTRY/docker/php8.0-xdebug-apache
#    only:
#      refs:
#        - develop
    before_script:
        - php -m
        - apt-get update && apt-get install -y xvfb fontconfig pcregrep
        - Xvfb :0 -ac -screen 0 1024x768x24 &
        - echo "xdebug.mode=coverage" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
        - composer config cache-files-dir .composer_cache
    stage: build
    retry: 2
    services:
      - postgres:12.2-alpine
    script:
      - ant
      - ./bin/console lint:yaml config --parse-tags
      # this checks that the Twig template files contain no syntax errors
      - ./bin/console lint:twig templates --env=prod
      # this checks that the XLIFF translations contain no syntax errors
      - ./bin/console lint:xliff translations
      # this checks that arguments injected into services match type declarations
      - ./bin/console lint:container
      # TODO: replace the old security checker by the new checker provided by the 'symfony' binary
      # this checks that the application doesn't use dependencies with known security vulnerabilities
      #- ./bin/console security:check
      # this checks that Doctrine's mapping configurations are valid
      - ./bin/console doctrine:schema:validate --skip-sync -vvv --no-interaction
      #  Fail CI if the repo is in a dirty state after building assets (only for current release ie install)
      #-  if [[ "$ACTION" == "install" ]]; then yarn install && yarn encore production && git add --all && git diff --staged --exit-code; fi
      #- composer validate --strict
    variables:
      DATABASE_URL: $POSTGRES_DATABASE_URL
      POSTGRES_DB: bicorebundletest
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: "adminpass"
    only:
      - develop
  
build_mysql_php80:
    image: $CI_REGISTRY/docker/php8.0-xdebug-apache
#    only:
#      refs:
#        - develop
    before_script:
        - php -m
        - apt-get update && apt-get install -y xvfb fontconfig pcregrep
        - Xvfb :0 -ac -screen 0 1024x768x24 &
        - echo "xdebug.mode=coverage" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
        - composer config cache-files-dir .composer_cache
    stage: build
    retry: 2
    services:
      - mysql:8.0.22
    script:
      - ant
      - ./bin/console lint:yaml config --parse-tags
      # this checks that the Twig template files contain no syntax errors
      - ./bin/console lint:twig templates --env=prod
      # this checks that the XLIFF translations contain no syntax errors
      - ./bin/console lint:xliff translations
      # this checks that arguments injected into services match type declarations
      - ./bin/console lint:container
      # TODO: replace the old security checker by the new checker provided by the 'symfony' binary
      # this checks that the application doesn't use dependencies with known security vulnerabilities
      #- ./bin/console security:check
      # this checks that Doctrine's mapping configurations are valid
      - ./bin/console doctrine:schema:validate --skip-sync -vvv --no-interaction
      #  Fail CI if the repo is in a dirty state after building assets (only for current release ie install)
      #-  if [[ "$ACTION" == "install" ]]; then yarn install && yarn encore production && git add --all && git diff --staged --exit-code; fi
      #- composer validate --strict
    variables:
      DATABASE_URL: $MYSQL_DATABASE_URL
      MYSQL_DATABASE: bicorebundletest
      MYSQL_ROOT_PASSWORD: "adminpass"
    only:
      - develop
      
build_sqlite_php80:
    image: $CI_REGISTRY/docker/php8.0-xdebug-apache
#    only:
#      refs:
#        - develop
    stage: build
    retry: 2
    allow_failure: true
    script:
      - ant
      - ./bin/console lint:yaml config --parse-tags
      # this checks that the Twig template files contain no syntax errors
      - ./bin/console lint:twig templates --env=prod
      # this checks that the XLIFF translations contain no syntax errors
      - ./bin/console lint:xliff translations
      # this checks that arguments injected into services match type declarations
      - ./bin/console lint:container
      # TODO: replace the old security checker by the new checker provided by the 'symfony' binary
      # this checks that the application doesn't use dependencies with known security vulnerabilities
      #- ./bin/console security:check
      # this checks that Doctrine's mapping configurations are valid
      - ./bin/console doctrine:schema:validate --skip-sync -vvv --no-interaction
      #  Fail CI if the repo is in a dirty state after building assets (only for current release ie install)
      #-  if [[ "$ACTION" == "install" ]]; then yarn install && yarn encore production && git add --all && git diff --staged --exit-code; fi
      #- composer validate --strict
    variables:
      DATABASE_URL: $SQLITE_DATABASE_URL
    only:
      - develop

deploy_test_job:
  stage: deploy
  image: docker/compose
  before_script:
    - env
    - mkdir /root/.ssh && chmod 0700 /root/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - 'which ssh-agent || ( apk add openssh-client )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - chmod 700 ~/.ssh
    - chmod 644 ~/.ssh/known_hosts
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\tLogLevel=quiet\n\n" > ~/.ssh/config
    - docker-compose build
    - echo "SPA debug:"
    - echo "Registry:"$CI_REGISTRY
    - echo "Latest image tag:"$TAG_LATEST
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker push $TAG_LATEST
  script:
    - CMDPULL="cd /home/po.bogdso/$CI_PROJECT_NAME && docker pull $TAG_LATEST" && ssh $USER_AT_DOCKER $CMDPULL
    - ssh $USER_AT_DOCKER "sed -i \"s/APP_IMAGE_TAG=.*/APP_IMAGE_TAG=latest/\" /home/po.bogdso/$CI_PROJECT_NAME/.env"
    - ssh $USER_AT_DOCKER "cd /home/po.bogdso/$CI_PROJECT_NAME && docker-compose down && docker-compose up -d"
  only:
    - develop
  when: on_success
  environment:
    name: test
  
deploy_prod_job:
  stage: deploy
  image: docker/compose
  before_script:
    - env
    - mkdir /root/.ssh && chmod 0700 /root/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - 'which ssh-agent || ( apk add openssh-client )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - chmod 700 ~/.ssh
    - chmod 644 ~/.ssh/known_hosts
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\tLogLevel=quiet\n\n" > ~/.ssh/config
    - echo "SPA debug:"
    - echo "Registry:"$CI_REGISTRY
    - echo "Latest image tag:"$TAG_LATEST
    - echo "Deploy image tag:"$TAG_COMMIT
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY      
    - docker tag $TAG_LATEST $TAG_COMMIT
    - docker push $TAG_COMMIT
  script:
    - ssh $USER_AT_DOCKER "sed -i \"s/APP_IMAGE_TAG=.*/APP_IMAGE_TAG=$CI_COMMIT_TAG/\" /home/po.bogdso/$CI_PROJECT_NAME/.env"
    - ssh $USER_AT_DOCKER "cd /home/po.bogdso/$CI_PROJECT_NAME && docker-compose down && docker-compose up -d"
  when: manual
  environment:
    name: prod
  only:
    - tags

cleanup_build_job:
  stage: cleanup_build
  script:
    - cat ./var/logs/test.log
  when: on_failure
  only:
    - develop